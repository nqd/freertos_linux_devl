######## Build options ########

verbose = 0

######## Build setup ########

# SRCROOT should always be the current directory
SRCROOT         = $(TREEROOT)/FreeRTOS
POSIXPORT_ROOT	= $(TREEROOT)/posix_port

# .o directory
ODIR            = .obj

# the result
PROJECT			?= main
PROJECT_BIN		= $(PROJECT).out

# Source paths
FREERTOS_DIR	+= $(SRCROOT)/Source
FREERTOS_DIR	+= $(SRCROOT)/Source/portable/MemMang
FREERTOS_DIR	+= $(SRCROOT)/Source/portable/GCC/POSIX

INCLUDES	+= -I$(SRCROOT)/Source/include
INCLUDES	+= -I$(SRCROOT)/Source/portable/GCC/POSIX/

# Porting paths
POSIX_PORT_DIR	+= $(POSIXPORT_ROOT)/Source/portable/GCC/POSIX
POSIX_PORT_DIR	+= $(POSIXPORT_ROOT)/POSIX/FileIO
POSIX_PORT_DIR	+= $(POSIXPORT_ROOT)/POSIX/ParTest
POSIX_PORT_DIR	+= $(POSIXPORT_ROOT)/POSIX

INCLUDES	+= -I$(POSIXPORT_ROOT)/Source/portable/GCC/POSIX
INCLUDES	+= -I$(POSIXPORT_ROOT)/POSIX

# fileIO header
INCLUDES	+= -I$(SRCROOT)/Demo/Common/include

# All paths
VPATH		+= $(FREERTOS_DIR) $(POSIX_PORT_DIR)

# project object
C_FILES			+= $(PROJECT_SRC)
# IO objects
C_FILES			+= fileIO.c
# FreeRTOS Objects
C_FILES			+= croutine.c event_groups.c list.c queue.c tasks.c timers.c
# portable Objects
C_FILES			+= heap_3.c
C_FILES			+= port.c

# Generate OBJS names
OBJS = $(patsubst %.c,%.o,$(C_FILES))

######## C Flags ########

# Warnings
CWARNS += -W
CWARNS += -Wall
CWARNS += -Werror
CWARNS += -Wextra
CWARNS += -Wformat
CWARNS += -Wmissing-braces
CWARNS += -Wno-cast-align
CWARNS += -Wparentheses
CWARNS += -Wshadow
CWARNS += -Wno-sign-compare
CWARNS += -Wswitch
CWARNS += -Wuninitialized
CWARNS += -Wunknown-pragmas
CWARNS += -Wunused-function
CWARNS += -Wunused-label
CWARNS += -Wunused-parameter
CWARNS += -Wunused-value
CWARNS += -Wunused-variable
CWARNS += -Wmissing-prototypes

CFLAGS += -m32
CFLAGS += -DDEBUG=1
CFLAGS += -g -pthread -DUSE_STDIO=1 -D__GCC_POSIX__=1

# MAX_NUMBER_OF_TASKS = max pthreads used in the POSIX port.
# Default value is 64 (_POSIX_THREAD_THREADS_MAX), the minimum number required by POSIX.
CFLAGS += -DMAX_NUMBER_OF_TASKS=300

CFLAGS += $(INCLUDES) $(CWARNS) -O2

######## Makefile targets ########

# Rules
.PHONY : all setup clean

all: setup $(PROJECT_BIN)

setup:
# Make obj directory
	@mkdir -p $(ODIR)

# Fix to place .o files in ODIR
_OBJS = $(patsubst %,$(ODIR)/%,$(OBJS))

# If verbose, print gcc execution
ifeq ($(verbose),1)
Q :=
vecho := @true
else
Q := @
vecho := @echo
endif

$(ODIR)/%.o: %.c
	$(vecho) "CC -c -o $@ $<"
	$(Q)$(CC) $(CFLAGS) -c -o $@ $<

$(PROJECT_BIN): $(_OBJS)
	$(Q)$(CC) $(CFLAGS) $^ $(LINKFLAGS) $(LIBS) -o $@
	@echo "-------------------------"
	@echo "BUILD COMPLETE: $@"
	@echo "-------------------------"

clean:
	@-rm -rf $(ODIR) $(PROJECT_BIN)
	@echo "--------------"
	@echo "CLEAN COMPLETE"
	@echo "--------------"
